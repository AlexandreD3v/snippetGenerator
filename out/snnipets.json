{ 
"afterSubmit": { 
"prefix": "afterSubmit", 
"body": [ 
 "  ", 
"    function afterSubmit(context) {", 
"        // Called after record is submitted to the system.", 
"      }", 
"    ", 
"      return {", 
"        afterSubmit: afterSubmit", 
"      }", 
], 
"description": "afterSubmit", 
}, 
"beforeLoad": { 
"prefix": "beforeLoad", 
"body": [ 
 "", 
"function beforeLoad(context) {", 
"    // Called before record is loaded.", 
"  }", 
"    ", 
"  return {", 
"    beforeLoad: beforeLoad", 
"  }", 
], 
"description": "beforeLoad", 
}, 
"beforeSubmit": { 
"prefix": "beforeSubmit", 
"body": [ 
 "  ", 
"    function beforeSubmit(context) {", 
"        // Called before record is submitted to the system.", 
"      }", 
"    ", 
"      return {", 
"        beforeLoad: beforeLoad", 
"      }", 
], 
"description": "beforeSubmit", 
}, 
"ClientScript": { 
"prefix": "ClientScript", 
"body": [ 
 "/**", 
" * @NApiVersion 2.0", 
" * @NScriptType ClientScript", 
" * @NModuleScope SameAccount", 
" */", 
"define([], function() {", 
"", 
"    function pageInit(context) {", 
"      // Called when the page is initialized", 
"    }", 
"  ", 
"    function validateField(context) {", 
"      // Called when a field is validated", 
"    }", 
"  ", 
"    function fieldChanged(context) {", 
"      // Called when a field is changed", 
"    }", 
"  ", 
"    function postSourcing(context) {", 
"      // Called after a field is sourced from a server response", 
"    }", 
"  ", 
"    function lineInit(context) {", 
"      // Called when a new line is added to a sublist", 
"    }", 
"  ", 
"    function validateLine(context) {", 
"      // Called when a sublist line is validated", 
"    }", 
"  ", 
"    function sublistChanged(context) {", 
"      // Called when a sublist field is changed", 
"    }", 
"  ", 
"    function saveRecord(context) {", 
"      // Called when a record is saved", 
"    }", 
"  ", 
"    return {", 
"      pageInit: pageInit,", 
"      validateField: validateField,", 
"      fieldChanged: fieldChanged,", 
"      postSourcing: postSourcing,", 
"      lineInit: lineInit,", 
"      validateLine: validateLine,", 
"      sublistChanged: sublistChanged,", 
"      saveRecord: saveRecord", 
"    };", 
"  });", 
"  ", 
], 
"description": "ClientScript", 
}, 
"ClientScriptHelloWorld": { 
"prefix": "ClientScriptHelloWorld", 
"body": [ 
 "/**", 
" * @NApiVersion 2.0", 
" * @NScriptType ClientScript", 
" * @NModuleScope SameAccount", 
" */", 
"define([], function () {", 
"    function pageInit(context) {", 
"        // Display \"Hello World!\" in an alert dialog when the page loads", 
"        alert(\"Hello World!\");", 
"    }", 
"", 
"    return {", 
"        pageInit: pageInit", 
"    };", 
"});", 
], 
"description": "ClientScriptHelloWorld", 
}, 
"ClientScriptNSSample": { 
"prefix": "ClientScriptNSSample", 
"body": [ 
 "          /**", 
" *@NApiVersion 2.x", 
" *@NScriptType ClientScript", 
" */", 
" define(['N/error'],", 
" function(error) {", 
"     function pageInit(context) {", 
"         if (context.mode !== 'create')", 
"             return;", 
"         var currentRecord = context.currentRecord;", 
"         currentRecord.setValue({", 
"             fieldId: 'entity',", 
"             value: 107", 
"         });", 
"     }", 
"     function saveRecord(context) {", 
"         var currentRecord = context.currentRecord;", 
"         if (!currentRecord.getValue({", 
"                 fieldId: 'entity'", 
"             }) || currentRecord.getLineCount({", 
"                 sublistId: 'item'", 
"             }) < 1)", 
"             throw error.create({", 
"                 name: 'MISSING_REQ_ARG',", 
"                 message: 'Please enter all the necessary fields on the salesorder before saving'", 
"             });", 
"         return true;", 
"     }", 
"     function validateField(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         var sublistFieldName = context.fieldId;", 
"         var line = context.line;", 
"         if (sublistName === 'item') {", 
"             if (sublistFieldName === 'quantity') {", 
"                 if (currentRecord.getCurrentSublistValue({", 
"                         sublistId: sublistName,", 
"                         fieldId: sublistFieldName", 
"                     }) < 3)", 
"                     currentRecord.setValue({", 
"                         fieldId: 'otherrefnum',", 
"                         value: 'Quantity is less than 3'", 
"                     });", 
"                 else", 
"                     currentRecord.setValue({", 
"                         fieldId: 'otherrefnum',", 
"                         value: 'Quantity accepted'", 
"                     });", 
"             }", 
"         }", 
"         return true;", 
"     }", 
"     function fieldChanged(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         var sublistFieldName = context.fieldId;", 
"         var line = context.line;", 
"         if (sublistName === 'item' && sublistFieldName === 'item')", 
"             currentRecord.setValue({", 
"                 fieldId: 'memo',", 
"                 value: 'Item: ' + currentRecord.getCurrentSublistValue({", 
"                     sublistId: 'item',", 
"                     fieldId: 'item'", 
"                 }) + ' is selected'", 
"             });", 
"     }", 
"     function postSourcing(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         var sublistFieldName = context.fieldId;", 
"         var line = context.line;", 
"         if (sublistName === 'item' && sublistFieldName === 'item')", 
"             if (currentRecord.getCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: sublistFieldName", 
"                 }) === '39')", 
"                 if (currentRecord.getCurrentSublistValue({", 
"                         sublistId: sublistName,", 
"                         fieldId: 'pricelevels'", 
"                     }) !== '1-1')", 
"                     currentRecord.setCurrentSublistValue({", 
"                         sublistId: sublistName,", 
"                         fieldId: 'pricelevels',", 
"                         value: '1-1'", 
"                     });", 
"     }", 
"     function lineInit(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         if (sublistName === 'partners')", 
"             currentRecord.setCurrentSublistValue({", 
"                 sublistId: sublistName,", 
"                 fieldId: 'partner',", 
"                 value: '55'", 
"             });", 
"     }", 
"     function validateDelete(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         if (sublistName === 'partners')", 
"             if (currentRecord.getCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: 'partner'", 
"                 }) === '55')", 
"                 currentRecord.setValue({", 
"                     fieldId: 'memo',", 
"                     value: 'Removing partner sublist'", 
"                 });", 
"         return true;", 
"     }", 
"     function validateInsert(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         if (sublistName === 'partners')", 
"             if (currentRecord.getCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: 'contribution'", 
"                 }) !== '100.0%')", 
"                 currentRecord.setCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: 'contribution',", 
"                     value: '100.0%'", 
"                 });", 
"         return true;", 
"     }", 
"     function validateLine(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         if (sublistName === 'partners')", 
"             if (currentRecord.getCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: 'contribution'", 
"                 }) !== '100.0%')", 
"                 currentRecord.setCurrentSublistValue({", 
"                     sublistId: sublistName,", 
"                     fieldId: 'contribution',", 
"                     value: '100.0%'", 
"                 });", 
"         return true;", 
"     }", 
"     function sublistChanged(context) {", 
"         var currentRecord = context.currentRecord;", 
"         var sublistName = context.sublistId;", 
"         var op = context.operation;", 
"         if (sublistName === 'item')", 
"             currentRecord.setValue({", 
"                 fieldId: 'memo',", 
"                 value: 'Total has changed to ' + currentRecord.getValue({", 
"                     fieldId: 'total'", 
"                 }) + ' with operation: ' + op", 
"             });", 
"     }", 
"     return {", 
"         pageInit: pageInit,", 
"         fieldChanged: fieldChanged,", 
"         postSourcing: postSourcing,", 
"         sublistChanged: sublistChanged,", 
"         lineInit: lineInit,", 
"         validateField: validateField,", 
"         validateLine: validateLine,", 
"         validateInsert: validateInsert,", 
"         validateDelete: validateDelete,", 
"         saveRecord: saveRecord", 
"     };", 
" }); ", 
"", 
"     ", 
], 
"description": "ClientScriptNSSample", 
}, 
"fieldChanged": { 
"prefix": "fieldChanged", 
"body": [ 
 "  ", 
"    function fieldChanged(context) {", 
"        // Called when a field is changed", 
"      }", 
"", 
"      return {", 
"        fieldChanged: fieldChanged", 
"      }", 
], 
"description": "fieldChanged", 
}, 
"get": { 
"prefix": "get", 
"body": [ 
 "", 
"function get(request) {", 
"}", 
"", 
"return {", 
"    get: get", 
"}", 
], 
"description": "get", 
}, 
"getInputData": { 
"prefix": "getInputData", 
"body": [ 
 "", 
"function getInputData(summary) {", 
"    // TODO: Implement this function", 
"}", 
"", 
"return {", 
"    getInputData: getInputData", 
"}", 
], 
"description": "getInputData", 
}, 
"lineInit": { 
"prefix": "lineInit", 
"body": [ 
 "  ", 
"    function lineInit(context) {", 
"        // Called when a new line is added to a sublist", 
"      }", 
"", 
"      return {", 
"        lineInit: lineInit", 
"      }", 
], 
"description": "lineInit", 
}, 
"map": { 
"prefix": "map", 
"body": [ 
 "", 
"function map(summary) {", 
"    // TODO: Implement this function", 
"}", 
"", 
"return {", 
"    map: map", 
"}", 
], 
"description": "map", 
}, 
"MapReduce": { 
"prefix": "MapReduce", 
"body": [ 
 "/**", 
" * @NApiVersion 2.x", 
" * @NScriptType MapReduceScript", 
" */", 
"", 
"define([], function() {", 
"", 
"    function getInputData(context) {", 
"        // TODO: Implement this function", 
"    }", 
"", 
"    function map(context) {", 
"        // TODO: Implement this function", 
"    }", 
"", 
"    function reduce(context) {", 
"        // TODO: Implement this function", 
"    }", 
"", 
"    function summarize(summary) {", 
"        // TODO: Implement this function", 
"    }", 
"", 
"    return {", 
"        getInputData: getInputData,", 
"        map: map,", 
"        reduce: reduce,", 
"        summarize: summarize", 
"    };", 
"", 
"});", 
], 
"description": "MapReduce", 
}, 
"MaprReduceNSSample": { 
"prefix": "MaprReduceNSSample", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType MapReduceScript", 
"*/", 
"", 
"define(['N/file'], function (file) {", 
"", 
"    // Define characters that should not be counted when the script performs its", 
"    // analysis of the text.", 
"    const PUNCTUATION_REGEXP = /[\u2000-\u206F\u2E00-\u2E7F\\'!\"#\$%&\(\)\*\+,\-\.\/:;<=>\?@\[\]\^_`\{\|\}~]/g;", 
"", 
"    // Use the getInputData function to return two strings.", 
"    function getInputData() {", 
"        return \"the quick brown fox \njumps over the lazy dog.\".split('\n');", 
"    }", 
"", 
"    // After the getInputData function is executed, the system creates the following", 
"    // key/value pairs:", 
"    //", 
"    // key: 0, value: 'the quick brown fox'", 
"    // key: 1, value: 'jumps over the lazy dog.'", 
"", 
"    // The map function is invoked one time for each key/value pair. Each time the", 
"    // function is invoked, the relevant key/value pair is made available through", 
"    // the context.key and context.value properties.", 
"    function map(context) {", 
"", 
"        // Create a loop that examines each character in the string. Exclude spaces ", 
"        // and punctuation marks.", 
"        for (var i = 0; context.value && i < context.value.length; i++) {", 
"            if (context.value[i] !== ' ' && !PUNCTUATION_REGEXP.test(context.value[i])) {", 
"", 
"                // For each character, invoke the context.write() method. This method saves", 
"                // a new key/value pair. For the new key, save the character currently being", 
"                // examined by the loop. For each value, save the number 1.", 
"", 
"                context.write({", 
"                    key: context.value[i],", 
"                    value: 1", 
"                });", 
"            }", 
"        }", 
"    }", 
"", 
"    // After the map function has been invoked for the last time, the shuffle stage", 
"    // begins. In this stage, the system sorts the 35 key/value pairs that were saved", 
"    // by the map function during its two invocations. From those pairs, the shuffle", 
"    // stage creates a new set of key/value pairs, where the each key is unique. In", 
"    // this way,  the number of key/value pairs is reduced to 25. For example, the map", 
"    // stage saved three instances of  {'e','1'}. In place of those pairs, the shuffle", 
"    // stage creates one pair: {'e', ['1','1','1']}. These pairs are made available to", 
"    // the reduce stage through the context.key and context.values properties.", 
"", 
"    // The reduce function is invoked one time for each of the 25 key/value pairs", 
"    // provided.", 
"    function reduce(context) {", 
"", 
"        // Use the context.write() method to save a new key/value pair, where the new key", 
"        // equals the key currently being processed by the function. This key is a letter", 
"        // in the alphabet. Make the value equal to the length of the context.values array.", 
"        // This number represents the number of times the letter occurred in the original", 
"        // string.", 
"", 
"        context.write({", 
"            key: context.key,", 
"            value: context.values.length", 
"        });", 
"    }", 
"", 
"    // The summarize stage is a serial stage, so this function is invoked only one", 
"    // time.", 
"    function summarize(context) {", 
"", 
"        // Log details about the script's execution.", 
"        log.audit({", 
"            title: 'Usage units consumed',", 
"            details: context.usage", 
"        });", 
"        log.audit({", 
"            title: 'Concurrency',", 
"            details: context.concurrency", 
"        });", 
"        log.audit({", 
"            title: 'Number of yields',", 
"            details: context.yields", 
"        });", 
"", 
"        // Use the context object's output iterator to gather the key/value pairs saved", 
"        // at the end of the reduce stage. Also, tabulate the number of key/value pairs", 
"        // that were saved. This number represents the total number of unique letters", 
"        // used in the original string.", 
"        var text = '';", 
"        var totalKeysSaved = 0;", 
"        context.output.iterator().each(function (key, value) {", 
"            text += (key + ' ' + value + '\n');", 
"            totalKeysSaved++;", 
"            return true;", 
"        });", 
"", 
"        // Log details about the total number of pairs saved.", 
"        log.audit({", 
"            title: 'Unique number of letters used in string',", 
"            details: totalKeysSaved", 
"        });", 
"", 
"        // Use the N/file module to create a file that stores the reduce stage output,", 
"        // which you gathered by using the output iterator.", 
"        var fileObj = file.create({", 
"            name: 'letter_count_result.txt',", 
"            fileType: file.Type.PLAINTEXT,", 
"            contents: text", 
"        });", 
"", 
"        fileObj.folder = -15;", 
"        var fileId = fileObj.save();", 
"", 
"        log.audit({", 
"            title: 'Id of new file record',", 
"            details: fileId", 
"        });", 
"    }", 
"", 
"    // Link each entry point to the appropriate function.", 
"    return {", 
"        getInputData: getInputData,", 
"        map: map,", 
"        reduce: reduce,", 
"        summarize: summarize", 
"    };", 
"});", 
"", 
], 
"description": "MaprReduceNSSample", 
}, 
"onRequest": { 
"prefix": "onRequest", 
"body": [ 
 "function onRequest(context) {", 
"    switch (context) {", 
"        case \"POST\":", 
"            //TODO post", 
"            break;", 
"", 
"        case \"GET\":", 
"            //TODO get", 
"            break;", 
"", 
"        default:", 
"            //TODO default", 
"            break;", 
"", 
"    }", 
"}", 
"", 
"return {", 
"    onRequest: onRequest", 
"};", 
], 
"description": "onRequest", 
}, 
"pageInit": { 
"prefix": "pageInit", 
"body": [ 
 "", 
"function pageInit(context) {", 
"    // Called when the page is initialized", 
"  }", 
"", 
"  return {", 
"    pageInit: pageInit", 
"  }", 
], 
"description": "pageInit", 
}, 
"post": { 
"prefix": "post", 
"body": [ 
 "", 
"function post(request) {", 
"}", 
"", 
"return {", 
"    post: post", 
"}", 
], 
"description": "post", 
}, 
"postSourcing": { 
"prefix": "postSourcing", 
"body": [ 
 "  ", 
"    function postSourcing(context) {", 
"        // Called after a field is sourced from a server response", 
"      }", 
"", 
"      return {", 
"        postSourcing: postSourcing", 
"      }", 
], 
"description": "postSourcing", 
}, 
"put": { 
"prefix": "put", 
"body": [ 
 "", 
"function put(request) {", 
"}", 
"", 
"return {", 
"    put: put", 
"}", 
], 
"description": "put", 
}, 
"reduce": { 
"prefix": "reduce", 
"body": [ 
 "", 
"function reduce(summary) {", 
"    // TODO: Implement this function", 
"}", 
"", 
"return {", 
"    reduce: reduce", 
"}", 
], 
"description": "reduce", 
}, 
"RESTlet": { 
"prefix": "RESTlet", 
"body": [ 
 "/**", 
" * @NApiVersion 2.x", 
" * @NScriptType Restlet", 
" * @NModuleScope SameAccount", 
" */", 
"", 
"define([], function() {", 
"", 
"function get(request) {", 
"}", 
"", 
"function post(request) {", 
"}", 
"", 
"function put(request) {", 
"}", 
"", 
"function _delete(request) {", 
"}", 
"", 
"return {", 
"    get: get,", 
"    post: post,", 
"    put: put,", 
"    delete: _delete", 
"  };", 
"})", 
], 
"description": "RESTlet", 
}, 
"RESTletHelloWorld": { 
"prefix": "RESTletHelloWorld", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType restlet", 
"*/", 
"define([], function () {", 
"    return {", 
"        get: function () {", 
"            return \"Hello World!\"", 
"        }", 
"    }", 
"});", 
"", 
], 
"description": "RESTletHelloWorld", 
}, 
"RESTletNsSample": { 
"prefix": "RESTletNsSample", 
"body": [ 
 "          /**", 
" *@NApiVersion 2.x", 
" *@NScriptType Restlet", 
" */", 
" define(['N/record', 'N/error'],", 
" function(record, error) {", 
"     function doValidation(args, argNames, methodName) {", 
"         for (var i = 0; i < args.length; i++)", 
"             if (!args[i] && args[i] !== 0)", 
"                 throw error.create({", 
"                     name: 'MISSING_REQ_ARG',", 
"                     message: 'Missing a required argument: [' + argNames[i] + '] for method: ' + methodName", 
"                 });", 
"     }", 
"     // Get a standard NetSuite record", 
"     function _get(context) {", 
"         doValidation([context.recordtype, context.id], ['recordtype', 'id'], 'GET');", 
"         return JSON.stringify(record.load({", 
"             type: context.recordtype,", 
"             id: context.id", 
"         }));", 
"     }", 
"     // Delete a standard NetSuite record", 
"     function _delete(context) {", 
"         doValidation([context.recordtype, context.id], ['recordtype', 'id'], 'DELETE');", 
"         record.delete({", 
"             type: context.recordtype,", 
"             id: context.id", 
"         });", 
"         return String(context.id);", 
"     }", 
"     // Create a NetSuite record from request params", 
"     function post(context) {", 
"         doValidation([context.recordtype], ['recordtype'], 'POST');", 
"         var rec = record.create({", 
"             type: context.recordtype", 
"         });", 
"         for (var fldName in context)", 
"             if (context.hasOwnProperty(fldName))", 
"                 if (fldName !== 'recordtype')", 
"                     rec.setValue(fldName, context[fldName]);", 
"         var recordId = rec.save();", 
"         return String(recordId);", 
"     }", 
"     // Upsert a NetSuite record from request param", 
"     function put(context) {", 
"         doValidation([context.recordtype, context.id], ['recordtype', 'id'], 'PUT');", 
"         var rec = record.load({", 
"             type: context.recordtype,", 
"             id: context.id", 
"         });", 
"         for (var fldName in context)", 
"             if (context.hasOwnProperty(fldName))", 
"                 if (fldName !== 'recordtype' && fldName !== 'id')", 
"                     rec.setValue(fldName, context[fldName]);", 
"         rec.save();", 
"         return JSON.stringify(rec);", 
"     }", 
"     return {", 
"         get: _get,", 
"         delete: _delete,", 
"         post: post,", 
"         put: put", 
"     };", 
" }); ", 
"", 
"     ", 
], 
"description": "RESTletNsSample", 
}, 
"saveRecord": { 
"prefix": "saveRecord", 
"body": [ 
 "  ", 
"    function saveRecord(context) {", 
"        // Called when a record is saved", 
"      }", 
"", 
"      return {", 
"        saveRecord: saveRecord", 
"      }", 
], 
"description": "saveRecord", 
}, 
"sublistChanged": { 
"prefix": "sublistChanged", 
"body": [ 
 "  ", 
"    function sublistChanged(context) {", 
"        // Called when a sublist field is changed", 
"      }", 
"", 
"      return {", 
"        sublistChanged: sublistChanged", 
"      }", 
], 
"description": "sublistChanged", 
}, 
"SuiteletHelloWorld": { 
"prefix": "SuiteletHelloWorld", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType Suitelet", 
"*/", 
"define([], function () {", 
"    function onRequest(context) {", 
"        var html = '<html><body><h1>Hello World</h1></body></html>';", 
"        context.response.write(html);", 
"        context.response.setHeader({", 
"            name: 'Custom-Header-Demo',", 
"            value: 'Demo'", 
"        });", 
"    }", 
"", 
"    return {", 
"        onRequest: onRequest", 
"    };", 
"});", 
"", 
], 
"description": "SuiteletHelloWorld", 
}, 
"Suitelet": { 
"prefix": "Suitelet", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType Suitelet", 
"*/", 
"define([], function () {", 
"    function onRequest(context) {", 
"        switch (context) {", 
"            case \"POST\":", 
"                //TODO post", 
"                break;", 
"", 
"            case \"GET\":", 
"                //TODO get", 
"                break;", 
"", 
"            default:", 
"                //TODO default", 
"                break;", 
"", 
"        }", 
"    }", 
"", 
"    return {", 
"        onRequest: onRequest", 
"    };", 
"});", 
"", 
], 
"description": "Suitelet", 
}, 
"summarize": { 
"prefix": "summarize", 
"body": [ 
 "", 
"function summarize(summary) {", 
"    // TODO: Implement this function", 
"}", 
"", 
"return {", 
"    summarize: summarize", 
"}", 
], 
"description": "summarize", 
}, 
"SuiteletNSSampleForm": { 
"prefix": "SuiteletNSSampleForm", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType Suitelet", 
"*/", 
"define(['N/ui/serverWidget'], function (serverWidget) {", 
"    function onRequest(context) {", 
"        if (context.request.method === 'GET') {", 
"", 
"            // Section One - Forms - See 'Steps for Creating a Custom Form' in topic 'Sample Custom Form Script'", 
"            var form = serverWidget.createForm({", 
"                title: 'Customer Information'", 
"            });", 
"", 
"            var usergroup = form.addFieldGroup({", 
"                id: 'usergroup',", 
"                label: 'User Information'", 
"            });", 
"            usergroup.isSingleColumn = true;", 
"", 
"            var companygroup = form.addFieldGroup({", 
"                id: 'companygroup',", 
"                label: 'Company Information'", 
"            });", 
"", 
"            var select = form.addField({", 
"                id: 'titlefield',", 
"                type: serverWidget.FieldType.SELECT,", 
"                label: 'Title',", 
"                container: 'usergroup'", 
"            });", 
"            select.addSelectOption({", 
"                value: 'Mr.',", 
"                text: 'Mr.'", 
"            });", 
"            select.addSelectOption({", 
"                value: 'MS.',", 
"                text: 'Ms.'", 
"            });", 
"            select.addSelectOption({", 
"                value: 'Dr.',", 
"                text: 'Dr.'", 
"            });", 
"", 
"            var fname = form.addField({", 
"                id: 'fnamefield',", 
"                type: serverWidget.FieldType.TEXT,", 
"                label: 'First Name',", 
"                container: 'usergroup'", 
"            });", 
"            fname.isMandatory = true;", 
"", 
"            var lname = form.addField({", 
"                id: 'lnamefield',", 
"                type: serverWidget.FieldType.TEXT,", 
"                label: 'Last Name',", 
"                container: 'usergroup'", 
"            });", 
"            lname.isMandatory = true;", 
"", 
"            form.addField({", 
"                id: 'emailfield',", 
"                type: serverWidget.FieldType.EMAIL,", 
"                label: 'Email',", 
"                container: 'usergroup'", 
"            });", 
"", 
"            var companyname = form.addField({", 
"                id: 'companyfield',", 
"                type: serverWidget.FieldType.TEXT,", 
"                label: 'Company',", 
"                container: 'companygroup'", 
"            });", 
"            companyname.defaultValue = 'Company Name';", 
"", 
"            form.addField({", 
"                id: 'phonefield',", 
"                type: serverWidget.FieldType.PHONE,", 
"                label: 'Phone Number',", 
"                container: 'companygroup'", 
"            });", 
"", 
"            form.addField({", 
"                id: 'urlfield',", 
"                type: serverWidget.FieldType.URL,", 
"                label: 'Website',", 
"                container: 'companygroup'", 
"            });", 
"", 
"            form.addSubmitButton({", 
"                label: 'Submit'", 
"            });", 
"", 
"            // Section Two - Tabs - See 'Steps for Adding a Tab to a Form' in topic 'Sample Custom Form Script'", 
"            var tab1 = form.addTab({", 
"                id: 'tab1id',", 
"                label: 'Payment'", 
"            });", 
"            tab1.helpText = 'Help Text Goes Here';", 
"", 
"            var tab2 = form.addTab({", 
"                id: 'tab2id',", 
"                label: 'Inventory'", 
"            });", 
"", 
"            form.addSubtab({", 
"                id: 'subtab1id',", 
"                label: 'Payment Information',", 
"                tab: 'tab1id'", 
"            });", 
"", 
"            form.addSubtab({", 
"                id: 'subtab2id',", 
"                label: 'Transaction Record',", 
"                tab: 'tab1id'", 
"            });", 
"", 
"            // Subtab One Fields", 
"            var ccselect = form.addField({", 
"                id: 'cctypefield',", 
"                type: serverWidget.FieldType.SELECT,", 
"                label: 'Credit Card',", 
"                container: 'subtab1id'", 
"            });", 
"            ccselect.addSelectOption({", 
"                value: 'PayCard0',", 
"                text: 'Payment Card 0'", 
"            });", 
"            ccselect.addSelectOption({", 
"                value: 'PayCard1',", 
"                text: 'Payment Card 1'", 
"            });", 
"            ccselect.addSelectOption({", 
"                value: 'PayCard2',", 
"                text: 'Payment Card 2'", 
"            });", 
"", 
"            var expmonth = form.addField({", 
"                id: 'expmonth',", 
"                type: serverWidget.FieldType.SELECT,", 
"                label: 'Expiry Date:',", 
"                container: 'subtab1id'", 
"            });", 
"            expmonth.updateLayoutType({", 
"                layoutType: serverWidget.FieldLayoutType.STARTROW", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '01',", 
"                text: 'Jan'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '02',", 
"                text: 'Feb'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '03',", 
"                text: 'Mar'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '04',", 
"                text: 'Apr'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '05',", 
"                text: 'May'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '06',", 
"                text: 'Jun'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '07',", 
"                text: 'Jul'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '08',", 
"                text: 'Aug'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '09',", 
"                text: 'Sep'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '10',", 
"                text: 'Oct'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '11',", 
"                text: 'Nov'", 
"            });", 
"            expmonth.addSelectOption({", 
"                value: '12',", 
"                text: 'Dec'", 
"            });", 
"", 
"            var expyear = form.addField({", 
"                id: 'expyear',", 
"                type: serverWidget.FieldType.SELECT,", 
"                label: 'Expiry Year',", 
"                container: 'subtab1id'", 
"            });", 
"            expyear.updateLayoutType({", 
"                layoutType: serverWidget.FieldLayoutType.ENDROW", 
"            });", 
"            expyear.addSelectOption({", 
"                value: '2020',", 
"                text: '2020'", 
"            });", 
"            expyear.addSelectOption({", 
"                value: '2019',", 
"                text: '2019'", 
"            });", 
"            expyear.addSelectOption({", 
"                value: '2018',", 
"                text: '2018'", 
"            });", 
"", 
"            var credfield = form.addCredentialField({", 
"                id: 'credfield',", 
"                label: ' Credit Card Number',", 
"                restrictToDomains: 'www.mysite.com',", 
"                restrictToScriptIds: 'customscript_my_script',", 
"                restrictToCurrentUser: false,", 
"                container: 'subtab1id'", 
"            });", 
"            credfield.maxLength = 32;", 
"", 
"            // Subtab two Fields", 
"            form.addField({", 
"                id: 'transactionfield',", 
"                type: serverWidget.FieldType.LABEL,", 
"                label: 'Transaction History - Coming Soon',", 
"                container: 'subtab2id'", 
"            });", 
"", 
"            // Tab Two Fields", 
"            form.addField({", 
"                id: 'inventoryfield',", 
"                type: serverWidget.FieldType.LABEL,", 
"                label: 'Inventory - Coming Soon',", 
"                container: 'tab2id'", 
"            });", 
"", 
"            // Section Three - Sublist - See 'Steps for Adding a Sublist to a Form' in topic 'Sample Custom Form Script'", 
"            var sublist = form.addSublist({", 
"                id: 'sublistid',", 
"                type: serverWidget.SublistType.INLINEEDITOR,", 
"                label: 'Inline Sublist',", 
"                tab: 'tab2id'", 
"            });", 
"            sublist.addButton({", 
"                id: 'buttonId',", 
"                label: 'Print ',", 
"                functionName: '' // Add the function triggered on button click", 
"            });", 
"", 
"            // Sublist Fields", 
"            sublist.addField({", 
"                id: 'datefieldid',", 
"                type: serverWidget.FieldType.DATE,", 
"                label: 'Date'", 
"            });", 
"", 
"            sublist.addField({", 
"                id: 'productfieldid',", 
"                type: serverWidget.FieldType.TEXT,", 
"                label: 'Product'", 
"            });", 
"", 
"            sublist.addField({", 
"                id: 'qtyfieldid',", 
"                type: serverWidget.FieldType.INTEGER,", 
"                label: 'Quantity'", 
"            });", 
"", 
"            sublist.addField({", 
"                id: 'upfieldid',", 
"                type: serverWidget.FieldType.CURRENCY,", 
"                label: 'Unit Cost'", 
"            });", 
"", 
"            context.response.writePage(form);", 
"        } else {", 
"            // Section Four - Output - Used in all sections", 
"            var delimiter = /\u0001/;", 
"            var titleField = context.request.parameters.titlefield;", 
"            var fnameField = context.request.parameters.fnamefield;", 
"            var lnameField = context.request.parameters.lnamefield;", 
"            var emailField = context.request.parameters.emailfield;", 
"            var companyField = context.request.parameters.companyfield;", 
"            var phoneField = context.request.parameters.phonefield;", 
"            var urlField = context.request.parameters.urlfield;", 
"            var ccField = context.request.parameters.cctypefield;", 
"            var ccNumber = context.request.parameters.credfield;", 
"            var expMonth = context.request.parameters.expmonth;", 
"            var expYear = context.request.parameters.expyear;", 
"", 
"            context.response.write('You have entered:'", 
"                + '<br/>  Name: ' + titleField + ' ' + fnameField + ' ' + lnameField", 
"                + '<br/>  Email: ' + emailField", 
"                + '<br/>  Company: ' + companyField", 
"                + '<br/>  Phone: ' + phoneField + ' Website: ' + urlField", 
"                + '<br/>  Credit Card: ' + ccField", 
"                + '<br/>  Number: ' + ccNumber", 
"                + '<br/>  Expiry Date: ' + expMonth + '/' + expYear);", 
"        }", 
"    }", 
"    return {", 
"        onRequest: onRequest", 
"    };", 
"});", 
"", 
], 
"description": "SuiteletNSSampleForm", 
}, 
"UserEvent": { 
"prefix": "UserEvent", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType UserEventScript", 
"* @NModuleScope SameAccount", 
"*/", 
"", 
"define(['N/record'], function(record) {", 
"", 
"    function beforeLoad(context) {", 
"      // Called before record is loaded.", 
"    }", 
"  ", 
"    function beforeSubmit(context) {", 
"      // Called before record is submitted to the system.", 
"    }", 
"  ", 
"    function afterSubmit(context) {", 
"      // Called after record is submitted to the system.", 
"    }", 
"  ", 
"    return {", 
"      beforeLoad: beforeLoad,", 
"      beforeSubmit: beforeSubmit,", 
"      afterSubmit: afterSubmit", 
"    };", 
"  });", 
"  ", 
], 
"description": "UserEvent", 
}, 
"UserEventHelloWorld": { 
"prefix": "UserEventHelloWorld", 
"body": [ 
 "/**", 
"* @NApiVersion 2.x", 
"* @NScriptType UserEventScript", 
"* @NModuleScope SameAccount", 
"*/", 
"", 
"define(['N/ui/message'], function (message) {", 
"", 
"    function beforeLoad(context) {", 
"        if (context.type === context.UserEventType.VIEW) {", 
"            var msg = message.create({", 
"                title: 'Hello World',", 
"                message: 'This is a UserEvent script!',", 
"                type: message.Type.CONFIRMATION", 
"            });", 
"            msg.show();", 
"        }", 
"    }", 
"", 
"    return {", 
"        beforeLoad: beforeLoad", 
"    };", 
"});", 
], 
"description": "UserEventHelloWorld", 
}, 
"validateField": { 
"prefix": "validateField", 
"body": [ 
 "  ", 
"    function validateField(context) {", 
"        // Called when a field is validated", 
"      }", 
"", 
"      return {", 
"        validateField: validateField", 
"      }", 
], 
"description": "validateField", 
}, 
"UserEventNsSample": { 
"prefix": "UserEventNsSample", 
"body": [ 
 "/**", 
"*@NApiVersion 2.x", 
"*@NScriptType UserEventScript", 
"*/", 
"define(['N/record'], function (record) {", 
"    function beforeLoad(context) {", 
"        if (context.type !== context.UserEventType.CREATE)", 
"            return;", 
"        var customerRecord = context.newRecord;", 
"        customerRecord.setValue('phone', '555-555-5555');", 
"        if (!customerRecord.getValue('salesrep'))", 
"            customerRecord.setValue('salesrep', 46); // replace '46'  with one specific to your account", 
"    }", 
"    function beforeSubmit(context) {", 
"        if (context.type !== context.UserEventType.CREATE)", 
"            return;", 
"        var customerRecord = context.newRecord;", 
"        customerRecord.setValue('comments', 'Please follow up with this customer!');", 
"", 
"        if (!customerRecord.getValue('category')) {", 
"            throw error.create({       // you can change the type of error that is thrown", 
"                name: 'MISSING_CATEGORY',", 
"                message: 'Please enter a category.'", 
"            })", 
"        }", 
"    }", 
"    function afterSubmit(context) {", 
"        if (context.type !== context.UserEventType.CREATE)", 
"            return;", 
"        var customerRecord = context.newRecord;", 
"        if (customerRecord.getValue('salesrep')) {", 
"            var call = record.create({", 
"                type: record.Type.PHONE_CALL,", 
"                isDynamic: true", 
"            });", 
"            call.setValue('title', 'Make follow-up call to new customer');", 
"            call.setValue('assigned', customerRecord.getValue('salesrep'));", 
"            call.setValue('phone', customerRecord.getValue('phone'));", 
"            try {", 
"                var callId = call.save();", 
"                log.debug('Call record created successfully', 'Id: ' + callId);", 
"            } catch (e) {", 
"                log.error(e.name);", 
"            }", 
"        }", 
"    }", 
"    return {", 
"        beforeLoad: beforeLoad,", 
"        beforeSubmit: beforeSubmit,", 
"        afterSubmit: afterSubmit", 
"    };", 
"}); ", 
], 
"description": "UserEventNsSample", 
}, 
"validateLine": { 
"prefix": "validateLine", 
"body": [ 
 "  ", 
"    function validateLine(context) {", 
"        // Called when a sublist line is validated", 
"      }", 
"", 
"      return {", 
"        validateLine: validateLine", 
"      }", 
], 
"description": "validateLine", 
}, 
"_delete": { 
"prefix": "_delete", 
"body": [ 
 "", 
"function _delete(request) {", 
"}", 
"", 
"return {", 
"    _delete: _delete", 
"}", 
], 
"description": "_delete", 
}, 
} 
